Index: linux-2.6.24.7/drivers/i2c/chips/ds1337.c
===================================================================
--- linux-2.6.24.7.orig/drivers/i2c/chips/ds1337.c	2009-09-16 16:08:41.000000000 +0100
+++ linux-2.6.24.7/drivers/i2c/chips/ds1337.c	2009-09-16 16:15:42.000000000 +0100
@@ -28,6 +28,12 @@
 #define DS1337_REG_DATE		4
 #define DS1337_REG_MONTH	5
 #define DS1337_REG_CONTROL	14
+#define 	DS1337_BIT_nEOSC	0x80	/* in DS1337_REG_CONTROL */
+#define 	DS1337_BIT_RS2		0x10	/* in DS1337_REG_CONTROL */
+#define 	DS1337_BIT_RS1		0x08	/* in DS1337_REG_CONTROL */
+#define 	DS1337_BIT_INTCN	0x04	/* in DS1337_REG_CONTROL */
+#define 	DS1337_BIT_A2IE		0x02	/* in DS1337_REG_CONTROL */
+#define 	DS1337_BIT_A1IE		0x01	/* in DS1337_REG_CONTROL */
 #define DS1337_REG_STATUS	15
 
 /* FIXME - how do we export these interface constants? */
@@ -345,6 +351,14 @@
 	status = i2c_smbus_read_byte_data(client, DS1337_REG_STATUS);
 	control = i2c_smbus_read_byte_data(client, DS1337_REG_CONTROL);
 
+#if (defined(CONFIG_MACH_SIM_ONE))
+ 	/* SIM.ONE board needs 32khz clock on SQW/INTB pin */
+ 	i2c_smbus_write_byte_data(client, DS1337_REG_CONTROL,
+				  control & ~DS1337_BIT_INTCN);
+ 	i2c_smbus_write_byte_data(client, DS1337_REG_CONTROL,
+				  control | (DS1337_BIT_RS1 | DS1337_BIT_RS2));
+#endif
+
 	if ((status & 0x80) || (control & 0x80)) {
 		/* RTC not running */
 		u8 buf[1+16];	/* First byte is interpreted as address */
Index: linux-2.6.24.7/drivers/rtc/Kconfig
===================================================================
--- linux-2.6.24.7.orig/drivers/rtc/Kconfig	2009-09-16 13:02:24.000000000 +0100
+++ linux-2.6.24.7/drivers/rtc/Kconfig	2009-09-16 15:57:24.000000000 +0100
@@ -392,6 +392,14 @@
 	  This driver can also be built as a module. If so, the module
 	  will be called rtc-ep93xx.
 
+config RTC_DRV_EP93XX_DS1337
+	bool "Cirrus Logic EP93XX using DS1337 chip"
+	depends on RTC_DRV_EP93XX && I2C && MACH_SIM_ONE
+	help
+	  If you say yes here, the EP93XX driver will use the
+	  battery-backed-up DS1337 RTC chip on the SIM.ONE board.
+	  You almost certainyl want this.
+
 config RTC_DRV_SA1100
 	tristate "SA11x0/PXA2xx"
 	depends on ARCH_SA1100 || ARCH_PXA
Index: linux-2.6.24.7/drivers/rtc/rtc-ep93xx.c
===================================================================
--- linux-2.6.24.7.orig/drivers/rtc/rtc-ep93xx.c	2009-09-16 15:59:02.000000000 +0100
+++ linux-2.6.24.7/drivers/rtc/rtc-ep93xx.c	2009-09-16 16:15:02.000000000 +0100
@@ -13,6 +13,13 @@
 #include <linux/rtc.h>
 #include <linux/platform_device.h>
 #include <asm/hardware.h>
+#include <asm/io.h>
+
+#if defined(CONFIG_RTC_DRV_EP93XX_DS1337)
+extern int ds1337_do_command(int id, int cmd, void *arg);
+#define DS1337_GET_DATE         0
+#define DS1337_SET_DATE         1
+#endif
 
 #define EP93XX_RTC_REG(x)	(EP93XX_RTC_BASE + (x))
 #define EP93XX_RTC_DATA		EP93XX_RTC_REG(0x0000)
@@ -37,20 +44,35 @@
 
 static int ep93xx_rtc_read_time(struct device *dev, struct rtc_time *tm)
 {
+#if defined(CONFIG_RTC_DRV_EP93XX_DS1337)
+	/* Reroute the internal device to the DS1337 */
+	return ds1337_do_command(0, DS1337_GET_DATE, (void *)tm);
+#else
 	unsigned long time = __raw_readl(EP93XX_RTC_DATA);
 
 	rtc_time_to_tm(time, tm);
 	return 0;
+#endif
 }
 
 static int ep93xx_rtc_set_mmss(struct device *dev, unsigned long secs)
 {
+#if defined(CONFIG_RTC_DRV_EP93XX_DS1337)
+	struct rtc_time tm;
+
+	rtc_time_to_tm(secs, &tm);
+        return ds1337_do_command(0, DS1337_SET_DATE, (void *)&tm);
+#else
 	__raw_writel(secs + 1, EP93XX_RTC_LOAD);
 	return 0;
+#endif
 }
 
 static int ep93xx_rtc_set_time(struct device *dev, struct rtc_time *tm)
 {
+#if defined(CONFIG_RTC_DRV_EP93XX_DS1337)
+        return ds1337_do_command(0, DS1337_SET_DATE, (void *)tm);
+#else
 	int err;
 	unsigned long secs;
 
@@ -59,6 +81,7 @@
 		return err;
 
 	return ep93xx_rtc_set_mmss(dev, secs);
+#endif
 }
 
 static int ep93xx_rtc_proc(struct device *dev, struct seq_file *seq)
